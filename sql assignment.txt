Q1. What is a database? Differentiate between SQL and NoSQL databases.
A database is a structured collection of data organized for efficient retrieval and manipulation. Databases are used to store, manage, and access data in a way that allows for easy retrieval and modification.

SQL (Structured Query Language) and NoSQL databases are two main categories of database management systems:

SQL databases:
- SQL databases are relational databases that use structured tables with predefined schemas to store data.
- They are suitable for structured data with well-defined relationships between different data elements.
- SQL databases are ACID-compliant (Atomicity, Consistency, Isolation, Durability), which ensures data integrity and consistency.
- Examples of SQL databases include MySQL, PostgreSQL, Oracle, and Microsoft SQL Server.

NoSQL databases:
- NoSQL databases are non-relational databases designed for handling unstructured or semi-structured data.
- They can handle large volumes of data with more flexibility in terms of data structure.
- NoSQL databases are often used in scenarios where high scalability, performance, and flexibility are essential, such as web applications and big data processing.
- Examples of NoSQL databases include MongoDB, Cassandra, Redis, and Couchbase.

Q2. What is DDL? Explain why CREATE, DROP, ALTER, and TRUNCATE are used with an example.
DDL stands for Data Definition Language. It is a subset of SQL used for defining, altering, and managing the structure of a database. The main DDL commands are:

1. CREATE: Used to create new database objects such as tables, indexes, and views. Example:

```sql
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Salary DECIMAL(10, 2)
);
```

2. DROP: Used to delete existing database objects. Example:

```sql
DROP TABLE Employees;
```

3. ALTER: Used to modify the structure of an existing database object. Example:

```sql
ALTER TABLE Employees
ADD Email VARCHAR(100);
```

4. TRUNCATE: Used to delete all rows from a table but retain the table structure. It's faster than DELETE for removing all data. Example:

```sql
TRUNCATE TABLE Employees;
```

Q3. What is DML? Explain INSERT, UPDATE, and DELETE with an example.
DML stands for Data Manipulation Language. It is used to manipulate data stored in the database. The main DML commands are:

1. INSERT: Used to add new records (rows) to a table. Example:

```sql
INSERT INTO Employees (EmployeeID, FirstName, LastName, Salary)
VALUES (1, 'John', 'Doe', 50000);
```

2. UPDATE: Used to modify existing records in a table. Example:

```sql
UPDATE Employees
SET Salary = 55000
WHERE EmployeeID = 1;
```

3. DELETE: Used to remove records from a table. Example:

```sql
DELETE FROM Employees
WHERE EmployeeID = 1;
```

Q4. What is DQL? Explain SELECT with an example.
DQL stands for Data Query Language. It is used to retrieve data from a database. The primary DQL command is SELECT:

SELECT is used to retrieve data from one or more tables. You can specify which columns you want to retrieve, apply conditions to filter the data, and join multiple tables if needed. Example:

```sql
SELECT FirstName, LastName, Salary
FROM Employees
WHERE Salary > 50000;
```

This query retrieves the first name, last name, and salary of employees whose salary is greater than 50,000 from the "Employees" table.

Q5. Explain Primary Key and Foreign Key.
- Primary Key: A primary key is a unique identifier for each record (row) in a database table. It ensures that each row has a distinct value for the primary key column and enforces data integrity. Primary keys are used to identify and retrieve specific records efficiently. Typically, primary keys are indexed for quick access.

Example:
```sql
CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50)
);
```

In this example, "StudentID" is the primary key.

- Foreign Key: A foreign key is a column or a set of columns in a table that establishes a link between the data in two tables. It creates a relationship between the tables, enforcing referential integrity. A foreign key in one table refers to the primary key of another table, creating a connection between related data.

Example:
```sql
CREATE TABLE Enrollments (
    EnrollmentID INT PRIMARY KEY,
    StudentID INT,
    CourseID INT,
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);
```

In this example, "StudentID" and "CourseID" are foreign keys that reference the primary keys in the "Students" and "Courses" tables, respectively.

Q6. Write a Python code to connect MySQL to Python. Explain the cursor() and execute() method.
Here's a Python code example to connect to a MySQL database using the `mysql-connector-python` library:

```python
import mysql.connector

# Establish a connection to the MySQL database
connection = mysql.connector.connect(
    host="localhost",
    user="your_username",
    password="your_password",
    database="your_database_name"
)

# Create a cursor object
cursor = connection.cursor()

# Execute an SQL query
cursor.execute("SELECT * FROM Employees")

# Fetch and print the result
for row in cursor.fetchall():
    print(row)

# Close the cursor and the connection
cursor.close()
connection.close()
```

Explanation:
- `mysql.connector` is a Python library for connecting to MySQL databases.
- `connection` is an object representing the connection to the database, where you provide the host, username, password, and database name.
- `cursor` is a Python object that allows you to interact with the database. You create it using the `connection.cursor()` method.
- `cursor.execute()` is used to execute SQL queries. In the example, we execute a SELECT query to retrieve data from the "Employees" table.
- `cursor.fetchall()` retrieves all the rows returned by the query, and we iterate through them and print each row.
- Finally, we close the cursor and the database connection to release resources.

Q7. Give the order of execution of SQL clauses in an SQL query.
In SQL, the clauses in a query are executed in the following order:

1. **FROM:** Specifies the tables from which you want to retrieve data or perform operations.
2. **JOIN:** If your query involves joining multiple tables, the JOIN clause is executed next to combine rows from different tables based on specified conditions.
3. **WHERE:** Filters the rows from the result set based on specified conditions.
4. **GROUP BY:** Groups rows with the same values into summary rows.
5. **HAVING:** Filters groups in the result set based on conditions applied to the GROUP BY results.
6. **SELECT:** Specifies the columns you want to retrieve from the result set.
7. **DISTINCT:** If used, removes duplicate rows from the result set.
8. **ORDER BY:** Sorts the result set based on specified columns and order.
9. **LIMIT/OFFSET:** If used, limits the number of rows returned or skips a specified number of rows.

It's important to note that not